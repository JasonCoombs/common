/*

***********************************************************************************
* Copyright (C) 2019 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Communication.TradeHistory;

enum TradeHistoryTradeType
{
   FXTradeType                = 0;
   XBTTradeType               = 1;
   PMTradeType                = 2;
   FutureTradeType            = 3;
}

enum TradeHistoryRequestType
{
   LoadLatestTradeRequestType                   = 0;
   LoadLatestTradeForProductRequestType         = 1;
   LoadBuySellTradePricesOnProductRequestType   = 2;
   LoadSnapshotRequestType                      = 3;
   LoadPMProductsListRequestType                = 4;
   LoadInitialPMPriceRequestType                = 5;
   // LoadEODPricesRequestType - send DateContainer as payload to get EOD for a single date
   // response LoadEODPricesResponse
   LoadEODPricesRequestType                     = 6;
   // LoadEODSnapshotRequestType - send DateContainer as payload to get EOD for all days since that date
   // response EODSnapshotResponse
   LoadEODSnapshotRequestType                   = 7;
}

enum TradeHistoryResponseType
{
   LoadLatestTradeResponseType                  = 0;
   LoadLatestTradeForProductResponseType        = 1;
   LoadBuySellTradePricesOnProductResponseType  = 2;
   LoadSnapshotResponseType                     = 3;
   LoadPMProductsListResponseType               = 4;

   // updates from TH server side
   TradeHistoryUpdateType                       = 5;
   TradeHistoryNewCCProductUpdateType           = 6;

   LoadInitialPMPriceResponseType               = 7;
   LoadEODPricesResponseType                    = 8;
   DisabledCCProductUpdateType                  = 9;
   // EODSavedUpdateType - payload is EODSavedUpdate
   EODSavedUpdateType                           = 10;
   // EODSnapshotResponseType - payload is EODSnapshotResponse
   EODSnapshotResponseType                      = 11;
   LoadFuturesPriceBookResponseType             = 12;
   PriceBookUpdateType                          = 13;
   LiveCutoffUpdateType                         = 14;
}

message TradeHistoryRequest
{
   TradeHistoryRequestType request_type   = 1;
   bytes                   request        = 2;
}

message LatestTradeRequest
{
   TradeHistoryTradeType   trade_type  = 1;
}

message LoadSnapshotRequest
{
   TradeHistoryTradeType   trade_type     = 1;
   uint64                  from_timestamp = 2;
   // to_timestamp - optional
   uint64                  to_timestamp   = 3;
   // product - optional
   string                  product        = 4;
}

message LoadLatestTradeForProductRequest
{
   TradeHistoryTradeType   trade_type     = 1;
   string                  product        = 2;
}

message LoadBuySellTradePricesOnProductRequest
{
   TradeHistoryTradeType   trade_type     = 1;
   string                  product        = 2;
}

message TradeHistoryResponse
{
   TradeHistoryResponseType   response_type   = 1;
   bytes                      response        = 2;
}

message TradeRecord
{
   double   price       = 1;
   double   amount      = 2;
   string   product     = 3;
   bool     is_sell     = 4;
   uint64   timestamp   = 5;
   string   trade_id    = 6;
}

message PMTradeRecord
{
   double   price       = 1;
   uint64   amount      = 2;
   string   product     = 3;
   bool     is_sell     = 4;
   uint64   timestamp   = 5;
   string   trade_id    = 6;
}

message OnedayTradeRecord
{
   double   price       = 1;
   uint64   xbt_amount  = 2;
   string   product     = 3;
   bool     is_sell     = 4;
   uint64   timestamp   = 5;
   string   trade_id    = 6;
}

message LatestTradeResponse
{
   TradeHistoryTradeType   trade_type  = 1;
   bytes                   trade       = 2;
}

message LoadLatestTradeForProductResponse
{
   TradeHistoryTradeType   trade_type     = 1;
   string                  product        = 2;
   bytes                   trade          = 3;
}

message LoadBuySellTradePricesOnProductResponse
{
   TradeHistoryTradeType   trade_type     = 1;
   string                  product        = 2;
   bytes                   sell_trade     = 3;
   bytes                   buy_trade      = 4;
}

message LoadPMProductsListResponse
{
   repeated string         product = 1;
}

message TradeHistorySnapshot
{
   uint64                  snaphot_id     = 1;
   uint64                  snaphot_count  = 2;
   TradeHistoryTradeType   trade_type     = 3;
   repeated bytes          trade          = 4;
}

message TradeHistoryServerUpdate
{
   TradeHistoryTradeType   trade_type  = 1;
   bytes                   trade       = 2;
}

message TradeHistoryNewCCProductUpdate
{
   string                  product = 1;
}

message DisabledCCProductUpdate
{
   string                  product = 1;
}

message LoadInitialPMPriceRequest
{
   string                  product = 1;
}

message LoadInitialPMPriceResponse
{
   string product       = 1;
   bool   price_set     = 2;
   double bid_price     = 3;
   double offer_price   = 4;
}

message EODPrice
{
   string product = 1;
   double price   = 2;
}

message EODSnapshot
{
   repeated EODPrice fx_prices            = 3;
   repeated EODPrice xbt_prices           = 4;
   repeated EODPrice pm_prices            = 5;
}

message LoadEODPricesResponse
{
   bytes             snapshot       = 1;
   string            debug_message  = 2;
}

message DateContainer
{
   uint32 year    = 1;
   uint32 month   = 2;
   uint32 day     = 3;
}

message EODSavedUpdate
{
   DateContainer  date       = 1;
   bytes          snapshot   = 2;
}

message EODSnapshotResponse
{
   DateContainer           since_date     = 1;
   repeated EODSavedUpdate eod            = 2;
   string                  debug_message  = 3;
}

message PriceBookUpdate
{
   message Entry
   {
      string volume  = 1;
      double bid     = 2;
      double ask     = 3;
   }

   string         product_name   = 1;
   int32          book_type      = 2;
   repeated Entry prices         = 3;
}

message LiveCutoffUpdate
{
   string         product_name   = 1;
   uint64         timestamp      = 2;
   double         price          = 3;
}
