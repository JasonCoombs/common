/*

***********************************************************************************
* Copyright (C) 2020 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Server.FutStorage;

import "bs_types.proto";
import "bs_api_server.proto";

message Message
{
   message Position
   {
      int64                   id                   = 1;
      bool                    is_taker             = 2;
      bs.types.XBTAmountValue xbt_amount           = 3;
      bs.types.XBTPrice       open_price           = 4;
      bs.types.XBTPrice       close_price          = 5; // Only set in LoadTradeHistoryResponse
      bool                    is_rollover          = 6;
      uint64                  timestamp            = 7;
      uint32                  entity_id            = 8;
      int32                   prod_type            = 9;  // bs::fut::Product
      bool                    opened               = 10;
      string                  reserve_id           = 11; // genoa ref ID
      int32                   reserve_state        = 12; // FuturesTradesStorage::PositionReservationState
      bs.types.FXAmountValue  trade_pnl            = 13;
      bs.types.XBTAmountValue reference_exposure   = 14;
   }

   message PositionReservationInfo
   {
      int64    position_id = 1;
      string   reserve_id  = 2;
   }

   message SessionInfo
   {
      int32             load_status       = 1;  // FuturesTradesStorage::StatusCode

      int64             session_id        = 2;
      int32             session_state     = 3;  // FuturesTradesStorage::FuturesSessionState
      uint64            timestamp_started = 4;
      uint64            timestamp_closed  = 5;
      int32             product_type      = 6;  // bs::fut::Product
      bs.types.XBTPrice open_price        = 7;
      bs.types.XBTPrice close_price       = 8;
      float             taker_fee         = 9;
      float             maker_fee         = 10;
      float             im_rate           = 11;
      float             dm_rate           = 12;
   }

   message SessionRequest
   {
      int64             session_id        = 1;
      int32             product_type      = 2;  // bs::fut::Product
      uint64            timestamp_start   = 3;
      uint64            timestamp_close   = 4;
      bs.types.XBTPrice open_price        = 5;
      bs.types.XBTPrice close_price       = 6;
      float             fee_taker         = 7;
      float             fee_maker         = 8;
      float             im_rate           = 9;
      float             dm_rate           = 10;
   }

   message ActivateSessionRequest
   {
      int64             session_id        = 1;
   }

   message MarkSessionCompleted
   {
      int64             session_id        = 1;
   }

   message MarkSessionDamaged
   {
      int32             product_type      = 1; // bs::fut::Product
      int32             reason            = 2; // FuturesTradesStorage::DamageSessionReason
      string            reason_message    = 3;
   }

   message SessionPositions
   {
      int64             session_id  = 1;
      int32             load_status = 2;
      repeated Position positions   = 3;
   }

   message RegisterTradePositions
   {
      uint32                  taker_entity_id   = 1;
      uint32                  maker_entity_id   = 2;
      uint64                  timestamp         = 3;
      int32                   product_type      = 4; // bs::fut::Product
      bs.types.XBTAmountValue xbt_amount        = 5;
      bs.types.XBTPrice       price             = 6;
   }

   message RegisterTradePositionsResponse
   {
      int32    register_result      = 1; // FuturesTradesStorage::StatusCode
      Position taker_position_info  = 2;
      Position maker_position_info  = 3;
   }

   message ConfirmTradePositions
   {
      bool success = 1;
      PositionReservationInfo taker_reservation_info = 2;
      PositionReservationInfo maker_reservation_info = 3;
   }

   message NewRolloverPositionInfo
   {
      uint32                  entity_id         = 1;
      int32                   product_type      = 2; // bs::fut::Product
      bs.types.XBTAmountValue xbt_amount        = 3;
      bs.types.XBTAmountValue initial_exposure  = 4;
   }

   message OpenRolloverPositionsRequest
   {
      repeated NewRolloverPositionInfo positions = 1;
   }

   message OpenRolloverPositionsResponse
   {
      int32             open_result      = 1; // FuturesTradesStorage::StatusCode
      repeated Position opened_positions = 2;
   }

   message ConfirmRolloverPositionsRequest
   {
      repeated PositionReservationInfo positions_info = 1;
   }

   message NovationAccountInfo
   {
      uint32 account_id  = 1;
      uint32 entity_id   = 2;
      int32  state       = 3; // FuturesTradesStorage::NovationAccountState
   }

   message AddNovationAccountRequest
   {
      int64                session_id        = 1;
      NovationAccountInfo  account_info      = 2;
   }

   message LoadNovationAccountRequest
   {
      int64             session_id        = 1;
   }

   message NovationAccountResponse
   {
      int32                load_status    = 1;
      NovationAccountInfo  account_info   = 2;
   }

   message LoadReservationIdsRequest
   {
      int64             session_id        = 1;
   }

   message LoadReservationIdsResponse
   {
      int32                load_status    = 1; // FuturesTradesStorage::StatusCode
      repeated string      reserve_id     = 2; // genoa ref ID
   }

   message LoadTradeHistoryRequest
   {
      uint32               limit                      = 1;
      uint32               offset                     = 2;
      uint32               entity_id                  = 3;
      uint64               timestamp_start            = 4;
      uint64               timestamp_end              = 5;
      int64                session_id                 = 6;
      int64                position_id                = 7;
   }

   message LoadTradeHistoryResponse
   {
      bool                  loaded         = 1;
      repeated Position     positions      = 2;
      uint32                entity_id      = 4;
   }

   message LoadPnLHistoryRequest
   {
      enum HistoryInterval
      {
         OneHourInterval   = 0;
         OneDayInterval    = 1;
         OneWeekInterval   = 2;
      }

      uint32            entity_id         = 1;
      uint32            product_type      = 2;
      uint64            timestamp_start   = 3;
      HistoryInterval   interval          = 4;
   }

   message LoadPnLHistoryResponse
   {
      repeated Blocksettle.Communication.ApiServer.Response.LoadPnLHistory.Item items = 1;
   }

   message TradeFeeForEntityRequest
   {
      uint32 entity_id = 1;
      uint32 limit = 2;
      uint32 offset = 3;
   }

   message TradePLRequest
   {
      uint32 entity_id = 1;
      int32  product_type = 2;
      uint64 unix_time_from = 3;
      uint64 unix_time_to = 4;
   }

   message TradePLResponse
   {
      uint32 entity_id = 1;
      int32  product_type = 2;
      string PL = 3;
      bool   loaded = 4;
   }

   message TradesPL
   {
      message PL {
         int64  session_id = 1;
         uint32 entity_id = 2;
         bs.types.FXAmountValue PL = 3;
         int32  product_type = 4;
         uint64 timestamp = 6;
      }
      repeated PL trades = 1;
   }

   message UpdateReferenceExposure
   {
      int64                   position_id          = 1;
      bs.types.XBTAmountValue reference_exposure   = 2;
   }

   message LoadDamagedSessionInfoRequest
   {
      int64  session_id = 1;
   }

   message LoadDamagedSessionInfoResponse
   {
      int32    load_result    = 1; // FuturesTradesStorage::StatusCode
      int64    session_id     = 2;
      int32    session_state  = 3; // FuturesTradesStorage::FuturesSessionState
      int32    reason         = 4; // FuturesTradesStorage::DamageSessionReason
      string   reason_message = 5;
   }

   oneof data {
      int32                            get_session                         = 1;  // bs::fut::Product
      SessionInfo                      session_info                        = 2;

      SessionRequest                   get_session_positions               = 3;
      SessionPositions                 session_positions                   = 4;

      SessionRequest                   session_open                        = 5;
      SessionInfo                      session_open_response               = 6;

      ActivateSessionRequest           activate_session                    = 7;
      SessionInfo                      activate_session_response           = 8;

      SessionRequest                   session_close                       = 9;
      int32                            session_close_result                = 10;  // FuturesTradesStorage::StatusCode

      MarkSessionCompleted             mark_session_completed_request      = 11;
      int32                            mark_session_completed_response     = 12; // FuturesTradesStorage::StatusCode

      MarkSessionDamaged               mark_session_damaged_request        = 13;
      int32                            mark_session_damaged_response       = 14; // FuturesTradesStorage::StatusCode
      SessionRequest                   session_recovered                   = 15;
      int32                            session_result                      = 16; // FuturesTradesStorage::StatusCode

      RegisterTradePositions           open_positions_for_trade            = 17;
      RegisterTradePositionsResponse   open_positions_for_trade_response   = 18;

      ConfirmTradePositions            confirm_trade_positions             = 19;
      int32                            confirm_trade_positions_response    = 20; // FuturesTradesStorage::StatusCode

      OpenRolloverPositionsRequest     open_rollover_positions_request     = 21;
      OpenRolloverPositionsResponse    open_rollover_positions_response    = 22;

      ConfirmRolloverPositionsRequest  confirm_rollover_positions_request  = 23;
      int32                            confirm_rollover_positions_result   = 24;  // FuturesTradesStorage::StatusCode

      AddNovationAccountRequest        add_novation_account_request        = 25;
      NovationAccountResponse          add_novation_account_response       = 26;  // FuturesTradesStorage::StatusCode

      int64                            mark_novation_account_disposed_request    = 27; // account id
      int32                            mark_novation_account_disposed_response   = 28; // FuturesTradesStorage::StatusCode

      LoadNovationAccountRequest       load_novation_account_request             = 29;
      NovationAccountResponse          load_novation_account_response            = 30;

      LoadReservationIdsRequest        load_reservation_id_request               = 31;
      LoadReservationIdsResponse       load_reservation_id_response              = 32;

      LoadTradeHistoryRequest          load_trade_history_request                = 33;
      LoadTradeHistoryResponse         load_trade_history_response               = 34;

      TradeFeeForEntityRequest         trade_fee_request                                  = 35;
      Blocksettle.Communication.ApiServer.Response.TradeFeeForEntity trade_fee_response   = 36;

      TradePLRequest                   trade_pl_request                    = 37;
      TradePLResponse                  trade_pl_response                   = 38;
      TradesPL                         trades_pl_update                    = 39;

      UpdateReferenceExposure          update_reference_exposure_request   = 40;
      int32                            update_reference_exposure_response  = 41; // FuturesTradesStorage::StatusCode

      LoadPnLHistoryRequest            load_pnl_history_request            = 42;
      LoadPnLHistoryResponse           load_pnl_history_response           = 43;

      LoadDamagedSessionInfoRequest    load_damaged_session_info_request   = 44;
      LoadDamagedSessionInfoResponse   load_damaged_session_info_response  = 45;
   }
}
