/*

***********************************************************************************
* Copyright (C) 2020 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Server.Matching;

import "bs_server.proto";
import "bs_types.proto";

message XbtMatchedRequest
{
   string   settlement_id                    = 1;
   string   cl_order_id                      = 2;
   string   requestor_entity_name            = 3;
   string   dealer_entity_name               = 4;
   bool     requestor_sell                   = 5;
   bs.types.XBTPrice   price                 = 6;
   string   security_id                      = 7;
   string   currency                         = 8;
   bs.types.XBTAmountValue   qty             = 9;
   bs.types.FXAmountValue   contra_qty      = 10;
   int32    subsystem                        = 11;
   string   requestor_auth_addr_pubkey_hex   = 12;
   string   dealer_auth_addr_pubkey_hex      = 13;
}

message XbtResponseCommon
{
   string settlement_id = 1;
}

message XbtUnsignedPayinRequest
{
   string email = 1;
   string settlement_id = 2;
   bytes unsigned_payin = 3;
   repeated PreimageData preimage_data = 4;
}

message XbtUnsignedPayinResponse
{
   string settlement_id = 1;
   bytes payin_hash = 2;
}

message XbtSignedPayoutResponse
{
   string settlement_id = 1;
   bytes unsigned_payin = 2;
   bytes payin_hash = 3;
}

message XbtCancelRequest
{
   string email = 1;
   string settlement_id = 2;
}

message XbtSignedDataRequest
{
   string email = 1;
   string settlement_id = 2;
   bytes signed_tx = 3;
}

message XbtFailedNotification
{
   string settlement_id = 1;
   string error_msg = 2;
}

message CCVerifyQuoteRequest
{
   string quote_request_id = 1;
   string cc = 2;
   bool   requester_sells = 3;
   uint32 qty = 4;
   string requester_entity = 5;
   bytes  coin_input = 6;
   string receipt_address = 7;
   bool   otc = 8;
}

message CCVerifyQuoteReply
{
   string quote_request_id = 1;
   string quote_id = 2;
   string cc = 3;
   bool   requester_sells = 4;
   uint32 qty = 5;
   double price = 6;
   string dealer_entity = 7;
   bytes  coin_input = 8;
   string receipt_address = 9;
   bool   otc = 10;
}

message CCVerifyQuoteResponse
{
   string quote_request_id = 1;
   string quote_id = 2;
   string error_message = 3;
}

message CCQuoteAccepted
{
   string quote_request_id = 1;
   string cl_order_id = 2;
   string cc = 3;
   bool   requester_sells = 4;
   uint32 qty = 5;
   double price = 6;
   string requester_entity = 7;
   string dealer_entity = 8;
   bytes  coin_input = 9;
   string requester_receipt_address = 10;
   string dealer_receipt_address = 11;
   string winning_quote_id = 12;
}

message CCQuoteAcceptedResponse
{
   string quote_request_id = 1;
   string cl_order_id = 2;
   string error_message = 3;
}

message CCTradeRequest
{
   string cl_order_id = 1;
   string cc = 2;
   bool   requester_sells = 3;
   uint32 qty = 4;
   double price = 5;
   string requester_entity = 6;
   string dealer_entity = 7;
   bytes  requester_tx_data = 8;
   string requester_receipt_address = 9;
   bytes  dealer_tx_data = 10;
   string dealer_receipt_address = 11;
   string quote_id = 12;
}

message CCTradeResponse
{
   string cl_order_id = 1;
   string error_message = 2;
}

message CCCancelRequest
{
   string cl_order_id = 1;
   string request_id = 2;
   string requesting_user = 3;
}

message UserProperty
{
   string name = 1;
   bool   enabled = 2;
}

message UserPropertiesSet
{
   string user_email = 1;
   string email_hash = 2;
   repeated UserProperty properties = 3;
}

message RFSMarketOrder
{
   string                  entity_name         = 1;
   // XBT/EUR
   bs.types.XBTAmountValue xbt_amount          = 2;
   bs.types.Side           side                = 3;

   bs.types.XBTPrice       user_expected_price = 4;
   int32                   type                = 5;
   bool                    max_amount          = 6;
}

message RFSMarketOrderResponse
{
   string                  entity_name       = 1;
   bs.types.XBTAmountValue xbt_amount        = 2;
   bs.types.Side           side              = 3;
   bs.types.XBTPrice       order_price       = 4;
   bool                    matched           = 5;
   string                  error_message     = 6;
   string                  product           = 7;
   int64                   taker_position_id = 8;
}

message MatchingMessage
{
   oneof data {
      XbtMatchedRequest          xbt_matched_request = 1;
      XbtResponseCommon          xbt_matched_response = 2;
      XbtUnsignedPayinRequest    xbt_unsigned_payin_request = 3;
      XbtUnsignedPayinResponse   xbt_unsigned_payin_response = 4;
      XbtSignedDataRequest       xbt_signed_payout_request = 5;
      XbtSignedPayoutResponse    xbt_signed_payout_response = 6;
      XbtSignedDataRequest       xbt_signed_payin_request = 7;
      XbtResponseCommon          xbt_signed_payin_response = 8;
      XbtCancelRequest           xbt_cancel_request = 9;
      XbtFailedNotification      xbt_failed_notification = 10;
      XbtResponseCommon          xbt_settled_notification = 11;
      CCVerifyQuoteRequest       cc_quote_request = 20;
      CCVerifyQuoteReply         cc_quote_reply = 21;
      CCVerifyQuoteResponse      cc_quote_response = 22;
      CCQuoteAccepted            cc_quote_accepted = 23;
      CCQuoteAcceptedResponse    cc_quote_accepted_response = 24;
      CCTradeRequest             cc_trade = 25;
      CCTradeResponse            cc_trade_response = 26;
      CCCancelRequest            cc_cancel = 27;
      UserPropertiesSet          user_prop_set = 30;
   }
}


message MatchingMarketMessage
{
   oneof data {
      RFSMarketOrder             rfs_market_order = 1;
      RFSMarketOrderResponse     rfs_market_order_response = 2;
      string                     order_timeout = 3;
   }
}
