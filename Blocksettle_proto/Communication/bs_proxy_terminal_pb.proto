/*

***********************************************************************************
* Copyright (C) 2019 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Communication.ProxyTerminalPb;

import "bs_types.proto";

// Messages sent from terminal to PB and back.
// `Request` is sent from terminal (PB is a server here).

enum OtcState
{
   OTC_STATE_UNKNOWN = 0;
   OTC_STATE_FAILED = 1;
   OTC_STATE_WAIT_BUYER_SIGN = 2;
   OTC_STATE_WAIT_SELLER_SEAL = 3;
   OTC_STATE_WAIT_SELLER_SIGN = 4;
   OTC_STATE_CANCELLED = 5;
   OTC_STATE_SUCCEED = 6;
}

message Request
{
    // OTC

    message StartOtc
    {
        int32 request_id = 1;
    }

    message VerifyOtc
    {
        bool is_seller = 1;

        int64 amount = 2;
        int64 price = 3;

        string settlement_id = 4;

        bytes auth_address_seller = 5;
        bytes auth_address_buyer = 6;

        // Used to check fees and other details (UTXO for payin, settlement address etc)
        bytes unsigned_tx = 7;
        bytes payin_tx_hash = 9;

        string chat_id_seller = 10;
        string chat_id_buyer = 11;
    }

    message SealPayinValidity
    {
        string settlement_id = 1;
    }

    message ProcessTx
    {
        string settlement_id = 1;
        bytes signed_tx = 2;
    }

    message Cancel
    {
        // Try to cancel deal (could be used after VerifyOtc)
        string settlement_id = 1;
    }

    // Trades

    message XBTUnsignedPayin
    {
        string  settlement_id       = 1;
        bytes   unsigned_payin      = 2;
    }

    message XBTSignedPayin
    {
        string  settlement_id   = 1;
        bytes   signed_payin    = 2;
    }

    message XBTSignedPayout
    {
        string  settlement_id   = 1;
        bytes   signed_payout   = 2;
    }

    message XBTCancelTrade
    {
        string settlement_id   = 1;
    }

    message CCCancelTrade
    {
        string client_order_id = 1;
    }

    message DeliveryAddress
    {
        string          addr     = 1;
    }

   oneof data
   {
      StartOtc             start_otc            = 1;
      VerifyOtc            verify_otc           = 2;
      SealPayinValidity    seal_payin_validity  = 3;
      ProcessTx            process_tx           = 4;
      Cancel               cancel               = 5;
      DeliveryAddress      delivery_address     = 7;

      XBTUnsignedPayin     unsigned_payin       = 31;
      XBTSignedPayin       signed_payin         = 32;
      XBTSignedPayout      signed_payout        = 33;
      XBTCancelTrade       xbt_cancel           = 34;
      CCCancelTrade        cc_cancel            = 35;
   }
}

message Response
{
    // OTC

    message StartOtc
    {
        int32 request_id = 1;
        string settlement_id = 2;
    }

    message UpdateOtcState
    {
        string settlement_id = 1;
        OtcState state = 2;
        string error_msg = 3;
        int64 timestamp_ms = 4;
    }

    // Trades

    message UnsignedPayinRequest
    {
        string  settlement_id   = 1;
    }

    message SignPayoutRequest
    {
        string  settlement_id   = 1;
        bytes   payin_data      = 2;
        int64   timestamp_ms    = 3;
    }

    message SignPayinRequest
    {
        string  settlement_id       = 1;
        bytes   unsigned_payin_data = 2;
        bytes   payin_hash          = 3;
        int64   timestamp_ms        = 4;
    }

   message DeliveryObligationsRequest
   {
      enum Status
      {
          INVALID = 0;
          PENDING = 1;
          DELIVERED = 2;
      }
      string   id                   = 1;
      int64    to_deliver           = 2;
      string   bs_address           = 3;
      double   price                = 4;
      Status   status               = 5;
   }

   // Blotter
   message UpdateOrders
   {
      repeated bs.types.Order       orders      = 2;
   }

   message UpdateOrdersAndObligations
   {
      repeated bs.types.Order       orders      = 2;
      DeliveryObligationsRequest    obligation  = 3;
   }

   message FutureResponse
   {
      bool           success     = 1;
      string         product     = 6;
      string         error_msg   = 2;
      bs.types.Side  side        = 3;
      double         price       = 4;
      uint64         amount      = 5;
   }

   message DeliveryAddress
   {
      bool           success     = 1;
      string         error_msg   = 2;
   }

   message UpdateOrder
   {
      bs.types.Order order = 1;
      bs.types.Action action = 2;
   }

   oneof data
   {
      StartOtc       start_otc         = 1;
      UpdateOtcState update_otc_state  = 2;

      UnsignedPayinRequest    send_unsigned_payin  = 3;
      SignPayoutRequest       sign_payout          = 4;
      SignPayinRequest        sign_payin           = 5;
      FutureResponse          future_response      = 6;
      DeliveryAddress         delivery_address     = 7;

      // update_orders - deprecated after 0.91.2
      UpdateOrders                  update_orders              = 20;
      UpdateOrdersAndObligations    update_orders_obligations  = 21;
      DeliveryObligationsRequest    delivery_obligation_update = 22;
      UpdateOrder                   update_order               = 23;
   }
}
