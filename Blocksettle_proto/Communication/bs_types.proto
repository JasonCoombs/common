/*

***********************************************************************************
* Copyright (C) 2019 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package bs.types;

enum Action
{
    ACTION_UNKNOWN = 0;
    ACTION_CREATED = 1;
    ACTION_UPDATED = 2;
    ACTION_REMOVED = 3;
}

enum Side
{
    SIDE_INVALID = 0;
    SIDE_BUY = 1;
    SIDE_SELL = 2;
}

enum OrderStatus
{
   ORDER_STATUS_UNKNOWN = 0;
   ORDER_STATUS_PENDING = 1;
   ORDER_STATUS_FILLED = 2;
   ORDER_STATUS_VOID = 3;
}

enum PriceBookType
{
   CashSettlePriceBook = 0;
   DeliverablePriceBook = 1;
}

enum PriceRangeId
{
   RangeUndefined  = 0;
   Range_0_1       = 1;
   Range_1_5       = 2;
   Range_5_10      = 3;
   Range_10_25     = 4;
   Range_25_100    = 5;
}

message StreamPriceData
{
   PriceRangeId   range_id = 1;
   string         ask      = 2;
   string         bid      = 3;
}

message SubmitPricesData
{
   string                     product_type   = 1;
   repeated StreamPriceData   prices         = 2;
}

message PullPricesData
{
   string   product_type   = 1;
}

message Order
{
   string         id                = 1;
   OrderStatus    status            = 2;
   string         status_text       = 3;
   int64          timestamp_ms      = 4;
   string         product           = 5; // for example "XBT"
   string         product_against   = 6; // for example "EUR"
   Side           side              = 7;
   XBTAmountValue quantity          = 8;
   XBTPrice       price             = 9;
   int32          trade_type        = 10; // bs::network::Asset::Type
   XBTPrice       cut_off_price     = 11;
   FXAmountValue  trade_im          = 12;
   bool           is_rollover       = 13;
}

message ChatToken
{
   int64 timestamp_ms = 1;

   string chat_login = 2;

   // bs::network::UserType as int
   int32 user_type = 3;
}

message Balance
{
    string currency = 1;
    string balance = 2;
}

message TradeSettings
{
    uint64 xbt_tier1_limit                   = 1;
    uint32 xbt_price_band                    = 2;
    uint32 auth_required_settled_trades      = 3;
    uint32 auth_submit_address_limit         = 4;
    uint32 dealer_auth_submit_address_limit  = 5;
}

// XBTPrice from DecimalPriceAmount.h
// XBTPrice.SerializeToProto(msg.mutable_xbt_price());
// auto xbtPrice = XBTPrice::DeserializeFromProto(msg.xbt_price());
message XBTPrice
{
    int64 price_value = 1;
}

message XBTAmountValue
{
    int64 amount_value = 1;
}

message FXAmountValue
{
    int64 amount_value = 1;
}

enum ApiKeyError
{
    API_KEY_ERROR_NO_ERROR = 0;
    API_KEY_ERROR_UNKNOWN_KEY = 1;
    API_KEY_ERROR_UNKNOWN_IP_ADDR = 2;
    API_KEY_ERROR_SERVER_ERROR = 3;
}
