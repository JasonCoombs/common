/*

***********************************************************************************
* Copyright (C) 2020 - 2021, BlockSettle AB
* Distributed under the GNU Affero General Public License (AGPL v3)
* See LICENSE or http://www.gnu.org/licenses/agpl.html
*
**********************************************************************************

*/
syntax = "proto3";

package Blocksettle.Server.Storage;

import "trade_history.proto";

message Empty
{}

message StorageCCDefinition
{
   string   cc_name  = 1;
   int32    lot_size = 2;
   bool     enabled  = 3;
}

message StorageCCUtxoMessage
{
   string settlement_id = 1;
   bytes  tx_hash = 2;
   uint32 index = 3;
   string cc = 4;
   uint64 amount = 5;
   string user = 6;
   string address = 7;
   int32  status = 8;
}

enum StorageType
{
   StorageUnknown       = 0;
   StorageCC            = 1;
   StorageAddresses     = 2;
   StorageRequests      = 3;
   StorageCCDefinitions = 4;
   StorageTradeHist     = 5;
   StorageUserScore     = 6;
   StorageConfig        = 7;
   StorageAccounts      = 8;
}


enum StorageCCDomain
{
   StorageCCUnknown = 0;
   StorageCcUtxo = 1;
}


enum StorageMessageType
{
   StorageUnknownType = 0;
   StorageGet         = 1;
   StoragePut         = 2;
   StorageDelete      = 3;
   StorageDataAvail   = 4;
}


message AuthAddress
{
   string   auth_address   = 1;
   string   user_name      = 2;
}

message AuthAddressInfo
{
   string   auth_address   = 1;
   string   user_name      = 2;
   uint32   address_state  = 3;
}

message SubmittedAddressQuery
{
   string user_name  = 1;
}

message SubmittedAddressResponse
{
   string            user_name   = 1;
   repeated string   address     = 2;
}

message LoadActiveAddressRequest
{
   // empty
}

message ActiveAddressListResponse
{
   repeated string address = 1;
}

message UpdateXbtSettlementCountRequest
{
   string settlement_id          = 1;
   string requester_auth_address = 2;
   string dealer_auth_address    = 3;
}

message UpdateXbtSettlementCountResponse
{
   bool  processed         = 1;
   bool  counters_updated  = 2;

   AuthAddressInfo   requester_address_info     = 3;
   int64             requester_settlement_count = 4;

   AuthAddressInfo   dealer_address_info        = 5;
   int64             dealer_settlement_count    = 6;
}

message FundAuthAddress
{
   string   auth_address   = 1;
   uint64   request_id     = 2;
}

message FundedAddressQuery
{
   string user_name  = 1;
}

message FundedAddressCounts
{
   uint32   active         = 1;
   uint32   all_time       = 2;

   bool     data_loaded    = 3;
}

message LoadAddressListForFundRequest
{
   string user_name  = 1;
}

message LoadAddressListForFundResponse
{
   repeated string address = 1;
}

message LoadUserDeliveryAddressRequest
{
   repeated string entity_name = 1;
}

message LoadUserDeliveryAddressResponse
{
   message DeliveryAddressData
   {
      string entity_name   = 1;
      string user_address  = 2;
   }

   repeated DeliveryAddressData user_data = 1;
}

message SetUserDeliveryAddressRequest
{
   string   entity_name    = 1;
   string   user_address   = 2;
}

message SetUserDeliveryAddressResponse
{
   string   entity_name    = 1;
   string   user_address   = 2;
   bool     success        = 3;
   string   error_msg      = 4;
}

message LoadUserDepositAddressRequest
{
   string   entity_name    = 1;
}

message LoadUserDepositAddressResponse
{
   string   entity_name       = 1;
   string   deposit_address   = 2;
}

message LoadWhitelistedAddressesRequest
{
   string   entity_name = 1;
}

message WhitelistedAddressInfo
{
   string   address           = 1;
   string   description       = 2;
   int64    submit_timestamp  = 3;
}

message LoadWhitelistedAddressesResponse
{
   string                           entity_name = 1;
   repeated WhitelistedAddressInfo  addresses   = 2;
}

message SubmitWhitelistedAddress
{
   string   entity_name = 1;
   string   address     = 2;
   string   description = 3;
}

message SubmitWhitelistedAddressResponse
{
   // bs::network::SubmitWhitelistedAddressStatus
   int32                   status_code    = 1;
   string                  entity_name    = 2;
   WhitelistedAddressInfo  address_info   = 3;
}

message SubmitDepositAddress
{
   string   entity_name = 1;
   string   address     = 2;
}

message SubmitDepositAddressResponse
{
   bool result = 1;
}

message RevokeWhitelistedAddress
{
   string   entity_name = 1;
   string   address     = 2;
}

message RevokeWhitelistedAddressResponse
{
   int32    status_code = 1;
   string   entity_name = 2;
   string   address     = 3;
}

message FindDepositAddressOwner
{
   string   address = 1;
}

message FindDepositAddressOwnerResponse
{
   string   entity_name = 1;
}

message GetWhitelistedAddressSummary
{
   string address = 1;
}

message GetWhitelistedAddressSummaryResponse
{
   string   entity_name = 1;
   bool     revoked     = 2;
}

message StorageAddressMessage
{
   oneof data
   {
      AuthAddress       submit_auth_address        = 1;
      bool              submit_result              = 2;

      FundAuthAddress   fund_auth_address_request  = 3;
      bool              update_fund_request_result = 4;

      string            revoke_auth_address        = 5;
      bool              revoke_result              = 6;

      string            auth_address               = 7;

      AuthAddressInfo   address_info               = 8;
      bool              update_address_info_result = 9;

      SubmittedAddressQuery      get_submitted_auth_list    = 10;
      SubmittedAddressResponse   submitted_address_list     = 11;

      SubmittedAddressQuery      get_submitted_auth_count   = 12;
      int64                      submitted_address_count    = 13;

      UpdateXbtSettlementCountRequest  update_settlement_count          = 14;
      UpdateXbtSettlementCountResponse update_settlement_count_result   = 15;

      FundedAddressQuery   get_funded_addresses_count = 16;
      FundedAddressCounts  funded_addresses_count     = 17;

      LoadActiveAddressRequest   get_active_address_list    = 18;
      ActiveAddressListResponse  active_address_list        = 19;

      LoadAddressListForFundRequest    load_addresses_for_fund = 20;
      LoadAddressListForFundResponse   addresses_for_fund_list = 21;

      LoadUserDeliveryAddressRequest   load_user_delivery_addresses  = 22;
      LoadUserDeliveryAddressResponse  user_delivery_addresses       = 23;

      SetUserDeliveryAddressRequest    set_user_delivery_address          = 24;
      SetUserDeliveryAddressResponse   set_user_delivery_address_response = 25;

      LoadUserDepositAddressRequest    load_deposit_address                = 26;
      LoadUserDepositAddressResponse   load_deposit_address_response       = 27;

      LoadWhitelistedAddressesRequest  load_whitelisted_addresses          = 28;
      LoadWhitelistedAddressesResponse load_whitelisted_addresses_response = 29;

      SubmitWhitelistedAddress         submit_whitelisted_address          = 30;
      SubmitWhitelistedAddressResponse submit_whitelisted_address_response = 31;

      RevokeWhitelistedAddress         revoke_whitelisted_address          = 32;
      RevokeWhitelistedAddressResponse revoke_whitelisted_address_response = 33;

      SubmitDepositAddress             submit_deposit_address              = 34;
      SubmitDepositAddressResponse     submit_deposit_address_response     = 35;

      FindDepositAddressOwner          find_deposit_address_owner          = 36;
      FindDepositAddressOwnerResponse  find_deposit_address_owner_response = 37;

      GetWhitelistedAddressSummary           get_address_summary           = 38;
      GetWhitelistedAddressSummaryResponse   get_address_summary_response  = 39;
   }
}

message SaveNewRequest
{
   RequestFileType   type           = 1;
   bytes             data           = 2;
   // Optional key to drop duplicated requests
   string            ext_request_id = 3;
}

message SaveNewResponse
{
   bool     success     = 1;
   uint64   request_id  = 2;
}

message CcToken
{
   string email = 1;
   string cc_product = 2;
   uint32 bs_seed = 3;
}

message AddCcToken
{
   CcToken  cc_token    = 1;
   string   request_id  = 2;
}

enum CcTokenStatus
{
   CC_TOKEN_STATUS_FAILED = 0;
   CC_TOKEN_STATUS_NOT_FOUND = 1;
   CC_TOKEN_STATUS_FOUND = 2;
   CC_TOKEN_STATUS_COMPLETE= 3;
}

message ExportRequestFiles
{
   string export_path = 1;
}

message ExportRequestFilesResponse
{
   bool     export_result  = 1;
   int32    requests_count = 2;
   string   export_path    = 3;
}

message RequestCompletedUpdate
{
   string request_id = 1;
}

enum RequestStorageMessageType
{
   UnknownRequestType             = 0;

   SaveRequestFileType            = 1;
   SaveRequestFileResponseType    = 2;

   ExportRequestsType             = 3;
   ExportRequestsResponseType     = 4;

   RequestCompletedType           = 5;
   PendingRequestsStatistics      = 6;

   AddCcTokenRequest              = 7;
   AddCcTokenResponse             = 8;
   VerifyCcTokenRequest           = 9;
   VerifyCcTokenResponse          = 10;
   CompleteCcTokenRequest         = 11;
   CompleteCcTokenResponse        = 12;
}

enum RequestFileType
{
   SubmitAuthAddressRequestFileType       = 0;
   RevokeAuthAddressRequestFileType       = 1;
   GenerateCCSeedRequestFileType          = 2;
   CCInitialDistributionRequestFileType   = 3;
   CreateCCDefinitionRequestFileType      = 4;
   CreateDeliveryTxRequestFileType        = 5;
}


message StorageCCMessage
{
  StorageCCDomain domain = 1;
   oneof data {
      StorageCCUtxoMessage utxo = 2;
      StorageCCUtxoBatch   utxo_batch = 3;
   }
}

message StorageCCUtxoBatch
{
   string settlement_id = 1;
   repeated StorageCCUtxoMessage utxos = 2;
}

message StorageCCDefinitionsMessage
{
   CCDefinitionsMessageType type = 1;

   oneof data {
      CCDefinitionsSnapshotMessage  cc_snapshot          = 2;
      StorageCCDefinition           create_definition    = 3;
      StorageCCDefinition           disable_definition   = 4;
      StorageCCDefinitionResponse   response             = 5;
   }
}

enum CCDefinitionsMessageType
{
   CCDefinitionsSnapshot      = 0;
   CreateCCDefinitionRequest  = 1;
   DisbleCCDefinitionRequest  = 2;
   CCDefinitionsResponse      = 3;
}

message CCDefinitionsSnapshotMessage
{
   int32                         revision    = 1;
   repeated StorageCCDefinition  definitions = 2;
}

message StorageCCDefinitionResponse
{
   bool     result         = 1;
   string   debug_message  = 2;
}

message StorageRequestsMessage
{
   RequestStorageMessageType  type = 1;
   bytes                      associated_data = 2;
   oneof data {
      SaveNewRequest             save_request      = 3;
      SaveNewResponse            save_response     = 8;
      ExportRequestFiles         export_request    = 4;
      ExportRequestFilesResponse export_response   = 5;
      RequestCompletedUpdate     completed_request = 6;
      PendingRequestsInfo        pending_requests_statistics   = 7;
      AddCcToken                 add_cc_token_request          = 9;
      bool                       add_cc_token_response         = 10;
      CcToken                    verify_cc_token_request       = 11;
      CcTokenStatus              verify_cc_token_response      = 12;
      CcToken                    complete_cc_token_request     = 13;
      bool                       complete_cc_token_response    = 14;
   }
}

message PendingRequestsInfo
{
   int32 submit_auth_address     = 1;
   int32 revoke_auth_address     = 2;
   int32 generate_cc_seed        = 3;
   int32 cc_initial_distribution = 4;
   int32 delivery_tx             = 5;
}


message StorageTradeHistBuySellTrades
{
   string product = 1;
   bytes  buy_trade = 2;
   bytes  sell_trade = 3;
}

message StorageTradeHistTrades
{
   string product = 1;
   uint64 time_from = 2;
   uint64 time_to = 3;
   repeated bytes trades = 4;
}

message StorageTradeHistCCPrices
{
   string product = 1;
   bool   is_set = 2;
   double bid_price = 3;
   double offer_price = 4;
}

message StorageTradeHistSnapshots
{
   repeated Snapshot snapshots = 1;
   Communication.TradeHistory.DateContainer original_date = 2;

   message Snapshot {
      bytes  snapshot = 1;
      Communication.TradeHistory.DateContainer date = 2;
   }
}

message GetLatestEODDate
{
   bool                                      loaded         = 1;
   Communication.TradeHistory.DateContainer  last_eod_date  = 2;
}

message SaveEODSnapshotResponse
{
   bool                                      saved    = 1;
   bytes                                     snapshot = 2;
   Communication.TradeHistory.DateContainer  date     = 3;
}

message CreateCcDefinition
{
   string cc_name = 1;
   bool is_set = 2;
}

message CCRegistrationOnCeler
{
   string   cc_name        = 1;
   bool     is_registered  = 2;
}


message StorageTradeHistMessage
{
   oneof data {
      bytes                                     fx_trade                = 1;
      bytes                                     xbt_trade               = 2;
      bytes                                     cc_trade                = 3;
      bytes                                     cash_settled_trade      = 4;
      bytes                                     deliverable_trade       = 5;

      bytes                                     trade_info                 = 6;	// used as a put response
      string                                    fx_trade_request           = 7;
      string                                    xbt_trade_request          = 8;
      string                                    cc_trade_request           = 9;
      string                                    cash_settled_trade_request = 10;
      string                                    deliverable_trade_request  = 11;

      StorageTradeHistBuySellTrades             fx_buysell_trade           = 12;
      StorageTradeHistBuySellTrades             xbt_buysell_trade          = 13;
      StorageTradeHistBuySellTrades             cc_buysell_trade           = 14;
      StorageTradeHistBuySellTrades             cash_settled_buysell_trade = 15;
      StorageTradeHistBuySellTrades             deliverable_buysell_trade  = 16;

      StorageTradeHistTrades                    fx_trades               = 17;
      StorageTradeHistTrades                    xbt_trades              = 18;
      StorageTradeHistTrades                    cc_trades               = 19;
      StorageTradeHistTrades                    cash_settled_trades     = 20;
      StorageTradeHistTrades                    deliverable_trades      = 21;

      string                                    cc_prices_request       = 22;
      StorageTradeHistCCPrices                  cc_prices_response      = 23;
      StorageTradeHistCCPrices                  set_cc_prices_request   = 24;
      Communication.TradeHistory.DateContainer  eod_snapshot_request    = 25;
      bytes                                     eod_snapshot_response   = 26;
      Communication.TradeHistory.DateContainer  eod_snapshots_request   = 27;
      StorageTradeHistSnapshots                 eod_snapshots_response  = 28;
      GetLatestEODDate                          last_eod_date           = 29;
      StorageTradeHistSnapshots                 save_eod_snapshot       = 30;
      SaveEODSnapshotResponse                   save_eod_result         = 31;
      Empty                                     last_eur_price_request  = 32;
      double                                    last_eur_price_response = 33;
      CreateCcDefinition                        create_cc_definition    = 34;
      CCRegistrationOnCeler                     cc_celer_registration   = 35;
   }
}

message UserScoreUpdateEvent
{
   enum ScoreUpdateEventType
   {
      UnsignedPayinSentBeforeRequested = 0;
      DuplicateUnsignedPayinDelivery   = 1;
      UnsignedPayinFromUnexpectedUser  = 2;
      UnsignedPayinToAMissingTrade     = 3;

      SignedPayoutSentToAMissingTrade  = 4;
      SignedPayoutSentBeforeRequested  = 5;
      DuplicateSignedPayoutDelivery    = 6;
      SignedPayoutFromUnexpectedUser   = 7;

      SignedPayinSentToAMissingTrade   = 8;
      SignedPayinSentBeforeRequested   = 9;
      DuplicateSignedPayinDelivery     = 10;
      SignedPayinFromUnexpectedUser    = 11;

      PayinPushMempoolConflict         = 12;
      PayoutPushMempoolConflict        = 13;

      InvalidAuthAddressUsed           = 14;
      SignedPayinTimeout               = 15;

      ReservedUTXOUsed                 = 16;

      UserBanFromCLI                   = 17;
      ResetUserScoreFromCLI            = 18;

      SignedPayoutTimeout              = 19;

      AttemptToCancelAnothersTrade     = 20;
      AttemptToCancelTradeAfterSign    = 21;
      SignedPayinToCancelledTrade      = 22;
      DealerFillRatioFailed            = 23;

      PayinDoubleSpend                 = 24;
      // when trade failed due to timeout ( payin/payout delivery)
      // or cancelled
      // but somehow TX detected
      ClosedXBTTradeProgressing        = 25;
      CashReservationFailed            = 26;

      // CC releated events
      CCAlreadyPushed                  = 27;
      CCDoubleSpend                    = 28;
      UnexpectedDealerCCHalf           = 29;
      UnexpectedRequesterCCHalf        = 30;
      UnexpectedCCCancel               = 31;

      // Auth address submit events
      StolenAuthAddressSubmitted       = 32;
   };

   string               user_email     = 1;
   ScoreUpdateEventType reason         = 2;
   string               settlement_id  = 3;
}

message UserScoreRequest
{
   string               user_email  = 1;
}

message UserScoreData
{
   string               user_email  = 1;
   uint64               score       = 2;
   bool                 loaded      = 3;
   bool                 user_banned = 4;
}

message DealerSettlementStats
{
   string user_email = 1;
   string settlement_id = 2;
   bool   success = 3;
}

message DealerSettlementResponse
{
   string user_email = 1;
   string settlement_id = 2;
   float  success_ratio = 3;
}

message StorageUserScoreMessage
{
   oneof data {
      UserScoreUpdateEvent     update_score_request    = 1;
      UserScoreRequest         ban_user_request        = 2;
      UserScoreRequest         reset_score_request     = 3;
      UserScoreRequest         load_score_request      = 4;
      UserScoreData            update_score_response   = 5;
      UserScoreData            load_score_response     = 6;
      DealerSettlementStats    dealer_stats_request    = 7;
      DealerSettlementResponse dealer_stats_response   = 8;
   }
}

message LoadConfigsRequest
{
   string   pattern = 1;
}

message ConfigParamter
{
   string name    = 1;
   string value   = 2;
}

message LoadedConfigs
{
   repeated ConfigParamter config = 1;
}

message SetConfigResponse
{
   bool     updated = 1;
   string   error_message = 2;
}

message StorageConfigMessage
{
   oneof data
   {
      LoadedConfigs        configs_update       = 1;
      LoadConfigsRequest   load_config_request  = 2;
      LoadedConfigs        load_config_response = 3;
      ConfigParamter       set_config_request   = 4;
      SetConfigResponse    set_config_response  = 5;
   }
}

message StorageAccountsMessage
{
   string email = 1;

   message TerminalUserId
   {
      string terminal_user_id = 1;
   }

   oneof data {
      TerminalUserId terminal_user_id = 2;
   }
}

message StorageMessage
{
   StorageMessageType   type     = 1;
   StorageType          domain   = 2;
   oneof data {
      StorageAddressMessage         address        = 3;
      StorageCCMessage              cc             = 4;
      StorageRequestsMessage        requests       = 5;
      StorageCCDefinitionsMessage   cc_definitions = 6;
      StorageTradeHistMessage       trade_hist     = 7;
      StorageUserScoreMessage       user_score     = 8;
      StorageConfigMessage          config         = 9;
      StorageAccountsMessage        accounts       = 10;
   }
}
